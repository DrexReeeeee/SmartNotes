@page "/home"
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@attribute [Authorize]

<div class="crt-effect animated-card">
    <h1 class="animated-header">📄 UPLOAD PDF TO SUMMARIZE</h1>

    <InputFile OnChange="HandleUpload" class="pixel-input mb-2 pulse" />
    <br />

    <button @onclick="GenerateSummary" class="pixel-btn glow" disabled="@(!canSummarize || isLoading)">
        @(isLoading ? "🧠 Summarizing..." : "⚡ Summarize")
    </button>

    @if (isLoading)
    {
        <div class="loader mt-3"></div>
        <p class="pixel-text"><em>Summoning AI magic... please wait.</em></p>
    }

    @if (!string.IsNullOrEmpty(SummaryHtml))
    {
        <h2 class="animated-header mt-4 typewriter">📝 EDITABLE SUMMARY</h2>
        <div class="btn-toolbar mb-2" role="toolbar">
            <div class="btn-group me-2" role="group">
                <button class="pixel-btn tiny-btn" @onclick='() => Format("bold")'><b>B</b></button>
                <button class="pixel-btn tiny-btn" @onclick='() => Format("italic")'><i>I</i></button>
                <button class="pixel-btn tiny-btn" @onclick='() => Format("underline")'><u>U</u></button>
                <button class="pixel-btn tiny-btn" @onclick='() => Format("insertUnorderedList")'>•</button>
            </div>
        </div>

        
        <div id="editor" class="form-control pixel-input pixel-editor" contenteditable="true" style="height: 500px; overflow-y: auto;" @ref="editorDiv">
            @((MarkupString)SummaryHtml)
        </div>

        <div class="mt-3 d-flex flex-wrap gap-2 justify-content-center">
            <button class="pixel-btn tiny-btn" @onclick="OpenSaveModal">💾 Save</button>
            <button class="pixel-btn tiny-btn secondary" @onclick="CopyToClipboard">📋 Copy</button>
            <button class="pixel-btn tiny-btn secondary" @onclick="ExtractToPdf">📎 PDF</button>
        </div>

    }

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <p class="text-danger pixel-text mt-3 blink">@ErrorMessage</p>
    }
</div>

<!-- Save Modal -->
@if (showSaveModal)
{
    <div class="modal pixel-modal show d-block">
        <div class="modal-dialog bounce-in">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">📝 Save Note</h5>
                    <button type="button" class="btn-close" @onclick="CloseSaveModal"></button>
                </div>
                <div class="modal-body">
                    <input class="form-control" placeholder="Note Title" @bind="NoteTitle" />
                    <div class="alert alert-warning mt-2">
                        ⚠️ Summary will be copied. You’ll paste it into the Etherpad after redirect.
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseSaveModal">Cancel</button>
                    <button class="btn btn-primary" @onclick="SaveNote">Save Note</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Redirect Modal -->
@if (showRedirectModal)
{
    <div class="modal pixel-modal show d-block">
        <div class="modal-dialog bounce-in">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">✅ Next Step</h5>
                    <button type="button" class="btn-close" @onclick="() => showRedirectModal = false"></button>
                </div>
                <div class="modal-body">
                    <p><strong>✔ Copied to clipboard.</strong></p>
                    <p>Click the button below to open the Etherpad and paste your summary (Ctrl + V).</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" @onclick="GoToEditNote">✏️ Edit in Etherpad</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private IBrowserFile selectedFile;
    private string SummaryHtml = string.Empty;
    private string ErrorMessage = string.Empty;
    private bool isLoading = false;
    private bool showSaveModal = false;
    private bool showRedirectModal = false;

    private string NoteTitle = string.Empty;
    private string SummaryToCopy = string.Empty;
    private string EtherpadLink = string.Empty;
    private int CreatedNoteId;

    private ElementReference editorDiv;
    private bool canSummarize => selectedFile != null;

    private const string EtherpadBaseUrl = "https://board.net";

    private class SummaryResponse
    {
        public string summary { get; set; }
    }

    async Task HandleUpload(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        SummaryHtml = string.Empty;
        ErrorMessage = string.Empty;
    }

    async Task GenerateSummary()
    {
        isLoading = true;
        ErrorMessage = string.Empty;
        SummaryHtml = string.Empty;

        try
        {
            var content = new MultipartFormDataContent();
            var stream = selectedFile.OpenReadStream(100_000_000);
            content.Add(new StreamContent(stream), "file", selectedFile.Name);

            var response = await Http.PostAsync("api/Summarizer/summarize", content);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<SummaryResponse>();
                SummaryHtml = result?.summary ?? "(No summary returned)";
            }
            else
            {
                ErrorMessage = $"Failed: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "Error: " + ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    async Task Format(string command)
    {
        await JS.InvokeVoidAsync("applyEditorCommand", command);
    }

    void OpenSaveModal() => showSaveModal = true;
    void CloseSaveModal() => showSaveModal = false;

    async Task SaveNote()
    {
        var html = await JS.InvokeAsync<string>("getEditorHtml", editorDiv);
        SummaryToCopy = StripHtmlTags(html);
        EtherpadLink = $"{EtherpadBaseUrl}/p/note_{Guid.NewGuid()}";

        await JS.InvokeVoidAsync("navigator.clipboard.writeText", SummaryToCopy);

        var newNote = new UserNotes
            {
                Title = NoteTitle,
                Content = EtherpadLink,
                LastUpdatedAt = DateTime.Now
            };

        try
        {
            var response = await Http.PostAsJsonAsync("api/notes", newNote);
            if (response.IsSuccessStatusCode)
            {
                var createdNote = await response.Content.ReadFromJsonAsync<UserNotes>();
                if (createdNote != null)
                {
                    CreatedNoteId = createdNote.Id;
                    showSaveModal = false;
                    showRedirectModal = true;
                }
                else
                {
                    ErrorMessage = "Note created, but could not get ID.";
                }
            }
            else
            {
                ErrorMessage = "Failed to save note.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "Error saving note: " + ex.Message;
        }
    }

    void GoToEditNote()
    {
        showRedirectModal = false;
        Navigation.NavigateTo($"/edit-note/{CreatedNoteId}");
    }

    async Task CopyToClipboard()
    {
        var html = await JS.InvokeAsync<string>("getEditorHtml", editorDiv);
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", html);
    }

    async Task ExtractToPdf()
    {
        var html = await JS.InvokeAsync<string>("getEditorHtml", editorDiv);
        await JS.InvokeVoidAsync("downloadPdfFromHtml", html);
    }

    string StripHtmlTags(string html)
    {
        return System.Text.RegularExpressions.Regex.Replace(html, "<.*?>", string.Empty);
    }

    public class UserNotes
    {
        public int Id { get; set; }
        public string? Title { get; set; }
        public string? Content { get; set; }
        public DateTime LastUpdatedAt { get; set; }
    }
}
