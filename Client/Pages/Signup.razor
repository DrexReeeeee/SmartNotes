@page "/signup"
@inject HttpClient Http
@inject NavigationManager Navigation
@layout LoginLayout
@using System.ComponentModel.DataAnnotations

<div class="login-container crt-effect">
    <div class="animated-logo">SmartNotes</div>

    <div class="login-box">
        <div class="logo">
            <i class="bi bi-journal-richtext pixel-icon"></i>
        </div>

        <h3 class="text-center text-white">Sign Up</h3>

        <EditForm Model="signupModel" OnValidSubmit="HandleSignup">
            <DataAnnotationsValidator />

            <input class="form-control mb-2" placeholder="Username" @bind-value="signupModel.Username" />
            <ValidationMessage For="@(() => signupModel.Username)" />

            <input class="form-control mb-2" type="email" placeholder="Email" @bind-value="signupModel.Email" />
            <ValidationMessage For="@(() => signupModel.Email)" />

            <div class="input-group password-group">
                <input class="form-control"
                       placeholder="Password"
                       type="@passwordInputType"
                       @bind="signupModel.Password" />
                <span class="input-group-text eye-toggle" @onclick="TogglePassword">
                    <i class="bi bi-eye"></i>
                </span>
            </div>
            <ValidationMessage For="@(() => signupModel.Password)" />

            <button class="btn btn-primary w-100" type="submit">Sign Up</button>
            <p class="text-danger mt-2">@errorMessage</p>
        </EditForm>
    </div>
</div>

@code {
    private SignupModel signupModel = new();
    private string? errorMessage;
    private bool showPassword = false;
    private string passwordInputType => showPassword ? "text" : "password";

    private void TogglePassword()
    {
        showPassword = !showPassword;
    }

    private async Task HandleSignup()
    {
        var response = await Http.PostAsJsonAsync("api/user/register", signupModel);
        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/");
        }
        else
        {
            var errorContent = await response.Content.ReadAsStringAsync();
            errorMessage = errorContent;
        }
    }

    public class SignupModel
    {
        [Required(ErrorMessage = "Username is required.")]
        public string? Username { get; set; }

        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email format.")]
        public string? Email { get; set; }

        [Required(ErrorMessage = "Password is required.")]
        [MinLength(8, ErrorMessage = "Password must be at least 8 characters.")]
        public string? Password { get; set; }
    }
}
