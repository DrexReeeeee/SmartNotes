@page "/Login"
@inject IJSRuntime JS
@inject HttpClient Http
@inject NavigationManager Navigation
@layout LoginLayout
@using System.ComponentModel.DataAnnotations

<div class="login-container crt-effect">
    <div class="animated-logo">SMARTNOTES</div>
    <div class="login-box">
        <div class="logo">
            <i class="bi bi-journal-text pixel-icon"></i>
        </div>

        <h1 class="pixel-text">Login</h1>

        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />

            <input class="form-control pixel-input"
                   placeholder="Email"
                   @bind-value="loginModel.Email"
                   autocomplete="email" />
            <ValidationMessage For="@(() => loginModel.Email)" />

            <div class="input-group password-group">
                <input class="form-control pixel-input"
                       type="@passwordInputType"
                       placeholder="Password"
                       @bind-value="loginModel.Password"
                       autocomplete="current-password" />
                <span class="input-group-text eye-toggle" @onclick="TogglePasswordVisibility">
                    <i class="bi bi-eye"></i>
                </span>
            </div>
            <ValidationMessage For="@(() => loginModel.Password)" />

            <button class="pixel-btn" type="submit">Login</button>
            <button class="pixel-btn secondary" type="button" @onclick="SignUp">Sign Up</button>

            <p class="text-danger">@errorMessage</p>
        </EditForm>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string? errorMessage;
    private bool showPassword = false;

    private string passwordInputType => showPassword ? "text" : "password";

    private void TogglePasswordVisibility() => showPassword = !showPassword;

    private async Task HandleLogin()
    {
        var response = await Http.PostAsJsonAsync("api/user/login", loginModel);

        if (response.IsSuccessStatusCode)
        {
            try
            {
                var result = await response.Content.ReadFromJsonAsync<JwtResult>();

                if (result != null && !string.IsNullOrEmpty(result.Token))
                {
                    await JS.InvokeVoidAsync("localStorage.setItem", "authToken", result.Token);
                    Navigation.NavigateTo("/notes");
                }
                else
                {
                    errorMessage = "Login succeeded, but token is missing.";
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"Error reading login response: {ex.Message}";
            }
        }
        else
        {
            var errorContent = await response.Content.ReadAsStringAsync();
            errorMessage = $"Login failed: {errorContent}";
            loginModel.Password = "";
        }
    }

    private void SignUp() => Navigation.NavigateTo("/signup");

    public class JwtResult { public string Token { get; set; } }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email format.")]
        public string? Email { get; set; }

        [Required(ErrorMessage = "Password is required.")]
        [MinLength(8, ErrorMessage = "Password must be at least 8 characters.")]
        public string? Password { get; set; }
    }
}
